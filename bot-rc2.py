import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import psycopg2
import json
from config import (  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    BOT_TOKEN,
    DEFAULT_URL,
    DEFAULT_PAGES,
    DEFAULT_TOP_LIST,
    DEFAULT_YEAR,
    DEFAULT_DEBUG,
    DB_NAME,
    DB_USER,
    DB_PASSWORD,
    DB_HOST,
    DB_PORT
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class BotConfig:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""

    def __init__(self):
        self.url = DEFAULT_URL
        self.pages = DEFAULT_PAGES
        self.top_list = DEFAULT_TOP_LIST
        self.year = DEFAULT_YEAR
        self.debug = DEFAULT_DEBUG


def get_db_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL"""
    return psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üé¨ –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/top - —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É\n"
        "/year <–≥–æ–¥> - —Ñ–∏–ª—å–º—ã –ø–æ –≥–æ–¥—É\n"
        "/search <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã\n"
        "/config - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/set_top <N> - —Ä–∞–∑–º–µ—Ä —Ç–æ–ø–∞\n"
        "/set_year <–≥–æ–¥> - —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É\n"
        "/set_debug <on/off> - —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏"
    )


async def show_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    config = context.bot_data.setdefault('config', BotConfig())
    response = (
        f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ –¢–æ–ø: {config.top_list}\n"
        f"‚Ä¢ –ì–æ–¥: {config.year or '–Ω–µ –∑–∞–¥–∞–Ω'}\n"
        f"‚Ä¢ –û—Ç–ª–∞–¥–∫–∞: {'–≤–∫–ª' if config.debug else '–≤—ã–∫–ª'}\n"
        f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {DB_NAME}@{DB_HOST}"
    )

    await update.message.reply_text(response)


async def set_parameter(update: Update, context: ContextTypes.DEFAULT_TYPE, param_name: str) -> None:
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if not context.args:
        await update.message.reply_text(f"–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {param_name}")
        return

    config = context.bot_data.setdefault('config', BotConfig())
    value = context.args[0]

    try:
        if param_name == 'top':
            config.top_list = int(value)
        elif param_name == 'year':
            config.year = int(value) if value.lower() != 'none' else None
        elif param_name == 'debug':
            config.debug = value.lower() == 'on'

        await update.message.reply_text(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}")
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")


async def get_top_movies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    config = context.bot_data.setdefault('config', BotConfig())

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
        cursor.execute('''
            SELECT title, year, imdb_rating, kp_rating, rating_avg, link
            FROM movies 
            WHERE imdb_rating IS NOT NULL AND kp_rating IS NOT NULL
            ORDER BY rating_avg DESC 
            LIMIT %s
        ''', (config.top_list,))

        movies = cursor.fetchall()
        conn.close()

        if not movies:
            await update.message.reply_text("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        response = "üèÜ –¢–æ–ø —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n\n"
        for i, (title, year, imdb, kp, avg, link) in enumerate(movies, 1):
            response += f"{i}. {title} ({year})\n"
            response += f"   ‚òÖ IMDb: {imdb or 'N/A'} | –ö–ü: {kp or 'N/A'} | –°—Ä–µ–¥–Ω–∏–π: {avg or 'N/A'}\n"
            response += f"   üîó {link}\n\n"

        await update.message.reply_text(response[:4000])  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ: {str(e)}")


async def get_movies_by_year(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ –≥–æ–¥—É"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ–¥: /year <–≥–æ–¥>")
        return

    try:
        year = int(context.args[0])
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT title, imdb_rating, kp_rating, rating_avg, link
            FROM movies 
            WHERE year = %s
            ORDER BY rating_avg DESC NULLS LAST
            LIMIT 20
        ''', (year,))

        movies = cursor.fetchall()
        conn.close()

        if not movies:
            await update.message.reply_text(f"üì≠ –§–∏–ª—å–º—ã –∑–∞ {year} –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        response = f"üé¨ –§–∏–ª—å–º—ã {year} –≥–æ–¥–∞:\n\n"
        for i, (title, imdb, kp, avg, link) in enumerate(movies, 1):
            response += f"{i}. {title}\n"
            response += f"   ‚òÖ IMDb: {imdb or 'N/A'} | –ö–ü: {kp or 'N/A'} | –°—Ä–µ–¥–Ω–∏–π: {avg or 'N/A'}\n\n"

        await update.message.reply_text(response[:4000])

    except ValueError:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ–¥—É: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


async def search_movies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: /search <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    search_query = ' '.join(context.args)
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT title, year, imdb_rating, kp_rating, rating_avg, link
            FROM movies 
            WHERE title ILIKE %s
            ORDER BY rating_avg DESC NULLS LAST
            LIMIT 15
        ''', (f'%{search_query}%',))

        movies = cursor.fetchall()
        conn.close()

        if not movies:
            await update.message.reply_text(f"üîç –§–∏–ª—å–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{search_query}':\n\n"
        for i, (title, year, imdb, kp, avg, link) in enumerate(movies, 1):
            response += f"{i}. {title} ({year})\n"
            response += f"   ‚òÖ IMDb: {imdb or 'N/A'} | –ö–ü: {kp or 'N/A'} | –°—Ä–µ–¥–Ω–∏–π: {avg or 'N/A'}\n\n"

        await update.message.reply_text(response[:4000])

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}")


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('SELECT COUNT(*) FROM movies')
        total_movies = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(DISTINCT year) FROM movies WHERE year IS NOT NULL')
        unique_years = cursor.fetchone()[0]

        cursor.execute('SELECT MIN(year), MAX(year) FROM movies WHERE year IS NOT NULL')
        min_year, max_year = cursor.fetchone()

        # –¢–æ–ø –≥–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∏–ª—å–º–æ–≤
        cursor.execute('''
            SELECT year, COUNT(*) 
            FROM movies 
            WHERE year IS NOT NULL 
            GROUP BY year 
            ORDER BY COUNT(*) DESC 
            LIMIT 5
        ''')
        top_years = cursor.fetchall()

        conn.close()

        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∏–ª—å–º–æ–≤: {total_movies}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ–¥–æ–≤: {unique_years}\n"
            f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {min_year or 'N/A'} - {max_year or 'N/A'}\n\n"
            f"üèÜ –¢–æ–ø –≥–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∏–ª—å–º–æ–≤:\n"
        )

        for year, count in top_years:
            response += f"  {year}: {count} —Ñ–∏–ª—å–º–æ–≤\n"

        response += f"\nüîÑ –ë–∞–∑–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞"

        await update.message.reply_text(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


async def get_random_movie(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT title, year, imdb_rating, kp_rating, rating_avg, link
            FROM movies 
            WHERE imdb_rating IS NOT NULL 
            ORDER BY RANDOM() 
            LIMIT 1
        ''')

        movie = cursor.fetchone()
        conn.close()

        if not movie:
            await update.message.reply_text("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç —Ñ–∏–ª—å–º–æ–≤")
            return

        title, year, imdb, kp, avg, link = movie
        response = (
            f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º:\n\n"
            f"üé¨ {title} ({year})\n"
            f"‚òÖ IMDb: {imdb or 'N/A'}\n"
            f"‚òÖ –ö–∏–Ω–æ–ü–æ–∏—Å–∫: {kp or 'N/A'}\n"
            f"‚òÖ –°—Ä–µ–¥–Ω–∏–π: {avg or 'N/A'}\n"
            f"üîó {link}"
        )

        await update.message.reply_text(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ñ–∏–ª—å–º–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        handlers = [
            CommandHandler("start", start),
            CommandHandler("top", get_top_movies),
            CommandHandler("year", get_movies_by_year),
            CommandHandler("search", search_movies),
            CommandHandler("stats", show_stats),
            CommandHandler("random", get_random_movie),
            CommandHandler("set_top", lambda u, c: set_parameter(u, c, 'top')),
            CommandHandler("set_year", lambda u, c: set_parameter(u, c, 'year')),
            CommandHandler("set_debug", lambda u, c: set_parameter(u, c, 'debug')),
            CommandHandler("config", show_config),
        ]

        for handler in handlers:
            application.add_handler(handler)

        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        application.run_polling()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()