import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import psycopg2
from config import (
    BOT_TOKEN,
    DB_NAME,
    DB_USER,
    DB_PASSWORD,
    DB_HOST,
    DB_PORT
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class BotConfig:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""

    def __init__(self):
        self.top_size = 10  # –†–∞–∑–º–µ—Ä —Ç–æ–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.selected_year = None  # –í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥


def get_db_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å PostgreSQL"""
    return psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        ['üé¨ Top', 'üìä Stats'],
        ['üîç Search']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üé¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Movie Bot!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ üé¨ Top - –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤\n"
        "‚Ä¢ üìä Stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ üîç Search - –ø–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ /search <–Ω–∞–∑–≤–∞–Ω–∏–µ> –¥–ª—è –ø–æ–∏—Å–∫–∞",
        reply_markup=reply_markup
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)"""
    text = update.message.text

    if text == 'üé¨ Top':
        await show_year_buttons(update, context)
    elif text == 'üìä Stats':
        await show_stats(update, context)
    elif text == 'üîç Search':
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n–ù–∞–ø—Ä–∏–º–µ—Ä: '/search –ú–∞—Ç—Ä–∏—Ü–∞'"
        )


async def show_year_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞"""
    keyboard = []

    # –ö–Ω–æ–ø–∫–∞ "–ó–∞ –≤—Å–µ –≥–æ–¥–∞"
    keyboard.append([InlineKeyboardButton("–ó–∞ –≤—Å–µ –≥–æ–¥–∞", callback_data='year_all')])

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–¥–æ–≤ —Å 1990 –ø–æ 2025
    years = list(range(1990, 2026))
    row = []

    for year in years:
        row.append(InlineKeyboardButton(str(year), callback_data=f'year_{year}'))
        if len(row) == 4:  # 4 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
            keyboard.append(row)
            row = []

    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É
        keyboard.append(row)

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:
        await update.callback_query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
            reply_markup=reply_markup
        )


async def show_top_size_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE, year: str) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–ø–∞"""
    query = update.callback_query
    await query.answer()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['selected_year'] = year

    keyboard = [
        [
            InlineKeyboardButton("–¢–æ–ø 10", callback_data=f'top_10_{year}'),
            InlineKeyboardButton("–¢–æ–ø 25", callback_data=f'top_25_{year}'),
            InlineKeyboardButton("–¢–æ–ø 50", callback_data=f'top_50_{year}')
        ],
        [
            InlineKeyboardButton("–¢–æ–ø 100", callback_data=f'top_100_{year}'),
            InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ–¥–∞", callback_data='back_to_years')
        ]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    year_text = "–≤—Å–µ –≥–æ–¥–∞" if year == "all" else f"{year} –≥–æ–¥"
    await query.edit_message_text(
        f"üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–æ–ø–∞ –¥–ª—è {year_text}:",
        reply_markup=reply_markup
    )


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    data = query.data

    if data.startswith('year_'):
        year = data.split('_')[1]
        await show_top_size_buttons(update, context, year)

    elif data.startswith('top_'):
        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ: top_10_1999 ‚Üí size=10, year=1999
        parts = data.split('_')
        top_size = int(parts[1])
        year = parts[2]

        await query.answer()
        await get_top_movies(update, context, top_size, year)

    elif data == 'back_to_years':
        await show_year_buttons(update, context)


async def get_top_movies(update: Update, context: ContextTypes.DEFAULT_TYPE, top_size: int, year: str) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ñ–∏–ª—å–º–æ–≤"""
    query = update.callback_query

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
        if year == 'all':
            sql_query = '''
                SELECT title, year, imdb_rating, kp_rating, rating_avg, link
                FROM movies 
                WHERE imdb_rating IS NOT NULL AND kp_rating IS NOT NULL
                ORDER BY rating_avg DESC 
                LIMIT %s
            '''
            params = (top_size,)
            year_text = "–∑–∞ –≤—Å–µ –≥–æ–¥–∞"
        else:
            sql_query = '''
                SELECT title, year, imdb_rating, kp_rating, rating_avg, link
                FROM movies 
                WHERE year = %s AND imdb_rating IS NOT NULL AND kp_rating IS NOT NULL
                ORDER BY rating_avg DESC 
                LIMIT %s
            '''
            params = (int(year), top_size)
            year_text = f"–∑–∞ {year} –≥–æ–¥"

        cursor.execute(sql_query, params)
        movies = cursor.fetchall()
        conn.close()

        if not movies:
            await query.edit_message_text(f"üì≠ –§–∏–ª—å–º—ã {year_text} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        response = f"üèÜ –¢–æ–ø-{top_size} —Ñ–∏–ª—å–º–æ–≤ {year_text}:\n\n"
        for i, (title, year, imdb, kp, avg, link) in enumerate(movies, 1):
            response += f"{i}. üé¨ {title} ({year})\n"
            response += f"   ‚òÖ IMDb: {imdb or 'N/A'} | –ö–ü: {kp or 'N/A'} | –°—Ä–µ–¥–Ω–∏–π: {avg or 'N/A'}\n"
            response += f"   üîó {link}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–ø"
        keyboard = [[InlineKeyboardButton("‚Üê –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–ø", callback_data='back_to_years')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(response[:4000], reply_markup=reply_markup, disable_web_page_preview=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã")


async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute('SELECT COUNT(*) FROM movies')
        total_movies = cursor.fetchone()[0]

        cursor.execute('SELECT COUNT(DISTINCT year) FROM movies WHERE year IS NOT NULL')
        unique_years = cursor.fetchone()[0]

        cursor.execute('SELECT MIN(year), MAX(year) FROM movies WHERE year IS NOT NULL')
        min_year, max_year = cursor.fetchone()

        # –¢–æ–ø –≥–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∏–ª—å–º–æ–≤
        cursor.execute('''
            SELECT year, COUNT(*) 
            FROM movies 
            WHERE year IS NOT NULL 
            GROUP BY year 
            ORDER BY COUNT(*) DESC 
            LIMIT 5
        ''')
        top_years = cursor.fetchall()

        conn.close()

        response = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∏–ª—å–º–æ–≤: {total_movies}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ–¥–æ–≤: {unique_years}\n"
            f"‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω: {min_year or 'N/A'} - {max_year or 'N/A'}\n\n"
            f"üèÜ –¢–æ–ø –≥–æ–¥–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ñ–∏–ª—å–º–æ–≤:\n"
        )

        for year, count in top_years:
            response += f"  {year}: {count} —Ñ–∏–ª—å–º–æ–≤\n"

        await update.message.reply_text(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


async def search_movies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    search_query = ' '.join(context.args) if context.args else update.message.text

    if not search_query or search_query.strip() == 'üîç Search':
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:\n–ù–∞–ø—Ä–∏–º–µ—Ä: '–ú–∞—Ç—Ä–∏—Ü–∞'")
        return

    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT title, year, imdb_rating, kp_rating, rating_avg, link
            FROM movies 
            WHERE title ILIKE %s
            ORDER BY rating_avg DESC NULLS LAST
            LIMIT 15
        ''', (f'%{search_query}%',))

        movies = cursor.fetchall()
        conn.close()

        if not movies:
            await update.message.reply_text(f"üîç –§–∏–ª—å–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        response = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{search_query}':\n\n"
        for i, (title, year, imdb, kp, avg, link) in enumerate(movies, 1):
            response += f"{i}. üé¨ {title} ({year})\n"
            response += f"   ‚òÖ IMDb: {imdb or 'N/A'} | –ö–ü: {kp or 'N/A'} | –°—Ä–µ–¥–Ω–∏–π: {avg or 'N/A'}\n"
            response += f"   üîó {link}\n\n"

        await update.message.reply_text(response[:4000], disable_web_page_preview=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∏–ª—å–º–æ–≤")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("search", search_movies))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(handle_callback_query))

        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º")
        application.run_polling()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    main()