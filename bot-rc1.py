import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from parser.lordfilm_parser import LordFilmParser
import json
from config import (  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    BOT_TOKEN,
    DEFAULT_URL,
    DEFAULT_PAGES,
    DEFAULT_TOP_LIST,
    DEFAULT_YEAR,
    DEFAULT_DEBUG
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class BotConfig:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""

    def __init__(self):
        self.url = DEFAULT_URL
        self.pages = DEFAULT_PAGES
        self.top_list = DEFAULT_TOP_LIST
        self.year = DEFAULT_YEAR
        self.debug = DEFAULT_DEBUG


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üé¨ –ë–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∏–ª—å–º–æ–≤ —Å LordFilm\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/config - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/set_url <url> - –∏–∑–º–µ–Ω–∏—Ç—å URL\n"
        "/set_pages <N> - —á–∏—Å–ª–æ —Å—Ç—Ä–∞–Ω–∏—Ü\n"
        "/set_top <N> - —Ä–∞–∑–º–µ—Ä —Ç–æ–ø–∞\n"
        "/set_year <–≥–æ–¥> - —Ñ–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É\n"
        "/set_debug <on/off> - —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏\n"
        "/parse - –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥"
    )


async def show_config(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    config = context.bot_data.setdefault('config', BotConfig())
    response = (
        f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ URL: {config.url}\n"
        f"‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü: {config.pages}\n"
        f"‚Ä¢ –¢–æ–ø: {config.top_list}\n"
        f"‚Ä¢ –ì–æ–¥: {config.year or '–Ω–µ –∑–∞–¥–∞–Ω'}\n"
        f"‚Ä¢ –û—Ç–ª–∞–¥–∫–∞: {'–≤–∫–ª' if config.debug else '–≤—ã–∫–ª'}"
    )

    await update.message.reply_text(response)


async def set_parameter(update: Update, context: ContextTypes.DEFAULT_TYPE, param_name: str) -> None:
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if not context.args:
        await update.message.reply_text(f"–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {param_name}")
        return

    config = context.bot_data.setdefault('config', BotConfig())
    value = context.args[0]

    try:
        if param_name == 'url':
            config.url = value
        elif param_name == 'pages':
            config.pages = int(value)
        elif param_name == 'top':
            config.top_list = int(value)
        elif param_name == 'year':
            config.year = int(value) if value.lower() != 'none' else None
        elif param_name == 'debug':
            config.debug = value.lower() == 'on'

        await update.message.reply_text(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}")
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")


async def parse_movies(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    config = context.bot_data.setdefault('config', BotConfig())

    await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")

    try:
        parser = LordFilmParser(
            base_url=config.url,
            year=config.year,
            debug=config.debug,
            # top_list=config.top_list
        )

        results = {}
        for sort_by in ['kp', 'imdb', 'avg']:
            movies = parser.get_sorted_movies(pages=config.pages, sort_by=sort_by)[:config.top_list]
            results[sort_by] = movies

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–ª–∫ –≤ —á–∞—Ç
            preview = "\n".join(
                f"{i}. {m['title']} ({m['year']}) - {m.get(f'rating_{sort_by}', m.get('rating_avg', 'N/A'))} {m['link']}"
                for i, m in enumerate(movies[:config.top_list], 1)
            )
            await update.message.reply_text(
                f"üèÜ –¢–æ–ø-{config.top_list} –ø–æ {sort_by.upper()}:\n{preview}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–∫ —Ñ–∞–π–ª
            with open(f'top_{sort_by}.json', 'w', encoding='utf-8') as f:
                json.dump(movies, f, ensure_ascii=False, indent=2)

            with open(f'top_{sort_by}.json', 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    caption=f"–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ø {config.top_list} –ø–æ {sort_by.upper()}"
                )

        await update.message.reply_text("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        handlers = [
            CommandHandler("start", start),
            CommandHandler("set_url", lambda u, c: set_parameter(u, c, 'url')),
            CommandHandler("set_pages", lambda u, c: set_parameter(u, c, 'pages')),
            CommandHandler("set_top", lambda u, c: set_parameter(u, c, 'top')),
            CommandHandler("set_year", lambda u, c: set_parameter(u, c, 'year')),
            CommandHandler("set_debug", lambda u, c: set_parameter(u, c, 'debug')),
            CommandHandler("parse", parse_movies),
            CommandHandler("config", show_config),
        ]

        for handler in handlers:
            application.add_handler(handler)

        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

    # # CommandHandler("config", show_config),

    # for handler in handlers:
    #     application.add_handler(handler)
    #
    # application.run_polling()

if __name__ == "__main__":
    main()

